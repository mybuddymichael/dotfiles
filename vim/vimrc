set nocompatible                  " Must come first because it changes other options.

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()          " Load pathogen bundles and generate docs.

syntax enable                     " Turn on syntax highlighting.
filetype plugin indent on         " Turn on file type detection.

let mapleader=","                 " Change leader key from \ to ,
nnoremap ; :
nnoremap <leader>q :q<cr>

colorscheme wombat                " Colorscheme.

set showcmd                       " Display incomplete commands.
set showmode                      " Display the mode you're in.

set backspace=indent,eol,start    " Intuitive backspacing.

set hidden                        " Handle multiple buffers better.

set wildmenu                      " Enhanced command line completion.
set wildmode=list:longest         " Complete files like a shell.

set ignorecase                    " Case-insensitive searching.
set smartcase                     " But case-sensitive if expression contains a capital letter.

set relativenumber                " Show relative line numbers.
set numberwidth=5                 " Line numbers are at least 5 characters wide.
set ruler                         " Show cursor position.
set cursorline                    " Show the cursor's line.
set colorcolumn=85                " Show a column at 85 so I don't overtype.
nmap <leader>c<cr> :set cursorline! cursorcolumn!<cr>

set incsearch                     " Highlight matches as you type.
set hlsearch                      " Highlight matches.

set scrolloff=3                   " Show 3 lines of context around the cursor.

set title                         " Set the terminal's title

set visualbell                    " No beeping.

set nobackup                      " Don't make a backup before overwriting a file.
set noswapfile                    " No swap files.
set nowritebackup                 " And again.
set directory=$HOME/.vim/tmp//,.  " Keep swap files in one location.

set nomodeline                    " No modelines for security reasons.

set laststatus=2                  " Show the status line all the time

" Invisibles toggling and formatting.
nnoremap <leader>l :set list!<CR>
set listchars=tab:▸\ ,trail:·,extends:…,precedes:…,eol:¬

" Set wrap settings and create :Wrap command.
command! -nargs=* Wrap set wrap linebreak nolist
set showbreak=…

" Easy escape
inoremap jj <esc>

" Easy window switching
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

" NERDTree stuff
nmap <leader>n :NERDTree<CR>
let NERDTreeShowHidden=1

" Useful status information at bottom of screen
set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{exists('*CapsLockStatusline')?CapsLockStatusline():''}%=%-16(\ %l,%c-%v\ %)%P

" Source hexhighlight script and set up mapping to call it.
source ~/.vim/bundle/vim-hexhighlight/hexHighlight.vim
nmap <leader>hh :call HexHighlight()<cr>
vmap <leader>hh :call HexHighlight()<cr>

" Quick editing of vimrc.
nnoremap <leader>z :e $MYVIMRC<cr>

" Source the vimrc file after saving it
if has("autocmd")
	autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Save on losing focus.
if has("autocmd")
	au FocusLost * :wa
endif

" Map alignment shortcuts.
if exists(":Tabularize")
	nmap <leader>a= :Tabularize /=<CR>
	vmap <leader>a= :Tabularize /=<CR>
	nmap <leader>a: :Tabularize /:\zs<CR>
	vmap <leader>a: :Tabularize /:\zs<CR>
endif

" Only do this part when compiled with support for autocommands
if has("autocmd")
	" Enable file type detection
	filetype on

	" Syntax of these languages is fussy over tabs Vs spaces
	autocmd FileType make       setlocal ts=8 sts=8 sw=8 noexpandtab
	autocmd FileType yaml       setlocal ts=2 sts=2 sw=2 expandtab

	" Customisations based on house-style (arbitrary)
	autocmd FileType css        setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType haml       setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType html       setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
	autocmd FileType ruby       setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType sass       setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType scss       setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType sh         setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType vim        setlocal ts=2 sts=2 sw=2 noexpandtab
	autocmd FileType vimrc      setlocal ts=2 sts=2 sw=2 noexpandtab

	" Treat .rss files as XML
	autocmd BufNewFile,BufRead *.rss setfiletype xml
endif

" Set tabstop, softtabstop and shiftwidth to the same value
command! -nargs=* Stab call Stab()
function! Stab()
	let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
	if l:tabstop > 0
		let &l:sts = l:tabstop
		let &l:ts = l:tabstop
		let &l:sw = l:tabstop
	endif
	call SummarizeTabs()
endfunction
 
function! SummarizeTabs()
	try
		echohl ModeMsg
		echon 'tabstop='.&l:ts
		echon ' shiftwidth='.&l:sw
		echon ' softtabstop='.&l:sts
		if &l:et
			echon ' expandtab'
		else
			echon ' noexpandtab'
		endif
	finally
		echohl None
	endtry
endfunction

" Show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
