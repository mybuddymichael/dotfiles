"                 _/
"    _/      _/      _/_/_/  _/_/    _/  _/_/    _/_/_/
"   _/      _/  _/  _/    _/    _/  _/_/      _/
"    _/  _/    _/  _/    _/    _/  _/        _/
"     _/      _/  _/    _/    _/  _/          _/_/_/
"
"   A very nice set of Vim settings.
"   --------------------------------


" Start off by setting nocompatible mode. This isn't vi.

  set nocompatible


" Load pathogen so that all the separate bundles are loaded.

  call pathogen#infect()
  call pathogen#helptags()


" Set my custom leader key and make some simple remaps for quicker commands.

  let mapleader=","
  nnoremap <leader>q :q<cr>
  nnoremap ; :
  nnoremap \ ;


" Enable syntax highlighting and filetype detection.

  syntax enable
  filetype plugin indent on


" The colorscheme is Solarized, and I like things dark (like a submarine!).
" Solarized can be toggled by hitting <F5>.

  set background=dark
  colorscheme solarized
  call togglebg#map("<F5>")


" Set some sane and reasonable defaults.

  set autoread                       " Don't ask me about loading files.
  set hidden                         " Handle multiple buffers better.
  set relativenumber                 " Show relative line numbers.
  set nowrap                         " Don't wrap lines.
  set showcmd                        " Display incomplete commands.
  set showmode                       " Display the mode you're in.
  set backspace=indent,eol,start     " Intuitive backspacing.
  set wildmenu                       " Enhanced command line completion.
  set wildmode=list:longest          " Complete files like a shell.
  set hlsearch                       " Highlight matches.
  set incsearch                      " Highlight matches as you type.
  set ignorecase                     " Case-insensitive searching.
  set smartcase                      " But case-sensitive if expression contains capitals.
  set spell                          " Use spell-checking.
  set spelllang=en_us                " U.S. English is the default language.
  set numberwidth=5                  " Line numbers are at least 5 characters wide.
  set cursorline                     " Show the cursor's line.
  set colorcolumn=79                 " Show a column at 79 so I don't overtype.
  set textwidth=79                   " Hard wrap lines at column 79.
  set scrolloff=3                    " Show 3 lines of context around the cursor.
  set laststatus=2                   " Show the status line all the time
  set title                          " Set the terminal's title
  set visualbell                     " No beeping.
  set nobackup                       " Don't make a backup before overwriting a file.
  set noswapfile                     " No swap files.
  set nowritebackup                  " And again.
  set undofile                       " Store persistent undo's.
  set undodir=$HOME/.vim/undo        " Set where to store undo's.
  set nomodeline                     " No modelines for security reasons.


" Set the statusline to something useful and informative.

  set statusline=[%n]\ %<%.99f\ %h%w%m%r%y\ %{fugitive#statusline()}\ %=%-26(\ %l\/%c\/%L\ %)%p


" Create a key-mapping for quick editing of the vimrc.

  nnoremap <leader>z :e $MYVIMRC<cr>


" Make it easy to escape insert mode by pressing 'jj'.

  inoremap jj <esc>


" Make window switching super-easy by setting some simple key remaps.

  nnoremap <c-h> <c-w>h
  nnoremap <c-j> <c-w>j
  nnoremap <c-k> <c-w>k
  nnoremap <c-l> <c-w>l
  nnoremap <c-c> <c-w>c


" Buffer switching is too tedious. Boom! Solved.

  nnoremap <leader>p :bp<cr>


" And let's make indentation super-easy as well.

  nnoremap <d-]> >>
  nnoremap <d-[> <<
  vnoremap <d-]> >gv
  vnoremap <d-[> <gv


" Clearing search highlighting should be super easy.

  nnoremap <leader><space> :noh<cr>
  vnoremap <leader><space> :noh<cr>


" Make a command to toggle showing invisible characters, and set what those are.

  nnoremap <leader>l :set list!<cr>
  set listchars=tab:▸\ ,trail:·,extends:…,precedes:…,eol:¬


" Create a ':Wrap' command, and set what the line-break symbol is.

  command! Wrap set wrap! linebreak nolist


" Map <leader>w to hard-wrap the selected line(s).

  vnoremap <leader>w JVgq


" Automatically save all buffers when the GUI app loses focus.

  if has("autocmd")
    au FocusLost * :wa
  endif


" Automatically source the vimrc file after saving it.

  if has("autocmd")
    au bufwritepost .vimrc source $MYVIMRC
  endif


" Make it easy to call some commonly-used plugins.

  " NERDTree
  nmap <leader>n :NERDTreeToggle<cr>
  let NERDTreeShowHidden = 1

  " CommandT
  nmap <leader>ff :CommandTFlush<cr>
  let g:CommandTMatchWindowReverse = 1
  let g:CommandTScanDotDirectories = 1
  let g:CommandTMaxHeight = 10

  " Tabularize
  nmap <leader>a=  :Tabularize /=<cr>
  vmap <leader>a=  :Tabularize /=<cr>
  nmap <leader>a:  :Tabularize /:\zs<cr>
  vmap <leader>a:  :Tabularize /:\zs<cr>
  nmap <leader>ap: :Tabularize /:/r0c1l0<cr>

  " Gundo
  nmap <leader>g :GundoToggle<cr>

  " Supertab
  let g:SuperTabDefaultCompletionType = "context"
  let g:SuperTabContextDefaultCompletionType = "<c-p>"
  let g:SuperTabLongestEnhanced = 1

  " CoffeeScript
  if has("autocmd")
     au BufWritePost *.coffee silent CoffeeMake! -b | cwindow
  endif

  " HexHighlight
  nmap <leader>hh :call HexHighlight()<cr>
  vmap <leader>hh :call HexHighlight()<cr>


" I use Ruby a lot, so let's make a mapping to call it easily.

  nnoremap <leader>r :w\|!ruby %<cr>


" Make a command to easily switch from regular numbering to relative numbering.

  command! Number call ToggleRelativeNumber()
  nmap <leader>m :Number<cr>
  vmap <leader>m :Number<cr>

  let s:relativeNumber = 1

  func! ToggleRelativeNumber()
    if s:relativeNumber == 1
      let s:relativeNumber = 0
      set number
    elseif s:relativeNumber == 0
      let s:relativeNumber = 1
      set relativenumber
    endif
  endfunc


" Show syntax highlighting groups for word under cursor

  nmap <C-S-P> :call <SID>SynStack()<CR>
  func! <SID>SynStack()
    if !exists("*synstack")
      return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunc


" Create a command to set tabstop, softtabstop and shiftwidth to the same value.

  command! Stab call Stab()

  func! Stab()
    let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
    if l:tabstop > 0
      let &l:sts = l:tabstop
      let &l:ts = l:tabstop
      let &l:sw = l:tabstop
    endif
    call SummarizeTabs()
  endfunc

  func! SummarizeTabs()
    try
      echohl ModeMsg
      echon 'tabstop='.&l:ts
      echon ' shiftwidth='.&l:sw
      echon ' softtabstop='.&l:sts
      if &l:et
        echon ' expandtab'
      else
        echon ' noexpandtab'
      endif
    finally
      echohl None
    endtry
  endfunc


" Set some spaces vs. tabs settings for various filetypes.

  if has("autocmd")
    " These filetypes are picky.
    au FileType make       setlocal ts=8 sts=8 sw=8 noexpandtab
    au FileType yaml       setlocal ts=2 sts=2 sw=2   expandtab

    " These filetypes are not picky.
    au FileType coffee     setlocal ts=2 sts=2 sw=2   expandtab
    au FileType css        setlocal ts=2 sts=2 sw=2 noexpandtab
    au FileType gitconfig  setlocal ts=4 sts=4 sw=4 noexpandtab
    au FileType haml       setlocal ts=2 sts=2 sw=2   expandtab
    au FileType html       setlocal ts=3 sts=3 sw=3   expandtab
    au FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab
    au FileType markdown   setlocal ts=4 sts=4 sw=4 noexpandtab
    au FileType ruby       setlocal ts=2 sts=2 sw=2   expandtab
    au FileType sass       setlocal ts=2 sts=2 sw=2   expandtab
    au FileType scss       setlocal ts=2 sts=2 sw=2   expandtab
    au FileType sh         setlocal ts=2 sts=2 sw=2 noexpandtab
    au FileType txt        setlocal ts=2 sts=2 sw=2   expandtab
    au FileType vim        setlocal ts=2 sts=2 sw=2   expandtab
    au FileType vimrc      setlocal ts=2 sts=2 sw=2   expandtab
    au FileType zsh        setlocal ts=2 sts=2 sw=2   expandtab

    " Set markdown documents to use a hard wrap at 79 characters.
    au FileType markdown   setlocal textwidth=79

    " Use some custom filetypes.
    au BufNewFile,BufRead *.rss set filetype=xml
    au BufNewFile,BufRead *.md  set filetype=markdown
  endif
