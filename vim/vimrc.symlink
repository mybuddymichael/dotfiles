"                 _/
"    _/      _/      _/_/_/  _/_/    _/  _/_/    _/_/_/
"   _/      _/  _/  _/    _/    _/  _/_/      _/
"    _/  _/    _/  _/    _/    _/  _/        _/
"     _/      _/  _/    _/    _/  _/          _/_/_/
"
"   A very nice set of Vim settings.
"   --------------------------------


" Start off by setting nocompatible mode. This isn't vi.

  set nocompatible


" Vundle! Manages your vim plugins. (See https://github.com/gmarik/vundle).

  filetype off

  set rtp+=~/.vim/bundle/vundle/
  call vundle#rc()

  " Load Vundle itself.
  Bundle "gmarik/vundle"

  " Solarized
  Bundle "altercation/vim-colors-solarized"

  " Tim Pope
  Bundle "tpope/vim-fugitive"
  Bundle "tpope/vim-commentary"
  Bundle "tpope/vim-surround"
  Bundle "tpope/vim-repeat"
  Bundle "tpope/vim-endwise"
  Bundle "tpope/vim-classpath"
  Bundle "tpope/vim-fireplace"
  Bundle "tpope/vim-rsi"
  Bundle "tpope/vim-ragtag"
  Bundle "tpope/vim-markdown"
  Bundle "tpope/vim-sleuth"
  Bundle 'tpope/vim-sexp-mappings-for-regular-people'

  " Niceties
  Bundle 'bling/vim-airline'
    let g:airline_theme = 'dark'
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''
  Bundle "Lokaltog/vim-easymotion"
  Bundle "sjl/gundo.vim"
  Bundle "ervandew/supertab"
  Bundle 'scrooloose/nerdtree'
  Bundle 'airblade/vim-gitgutter'
  Bundle "mattn/webapi-vim"
  Bundle "mattn/gist-vim"
    let g:gist_clip_command = "pbcopy"
    let g:gist_post_private = 1
    let g:gist_detect_filetype = 1
    let g:gist_open_browser_after_post = 1
    let g:gist_show_privates = 1

  Bundle "kien/ctrlp.vim"
    let g:ctrlp_dont_split = 'NERD_tree_2'
    let g:ctrlp_custom_ignore = {
          \ 'file': '\v\.(class|jar)$',
          \ 'dir': '\vtarget$' }

  Bundle "scrooloose/syntastic"
    let g:syntastic_error_symbol = "!!"
    let g:syntastic_warning_symbol = "??"

  Bundle "Raimondi/delimitMate"
    " By default, delimitMate clobbers Vim's timeout settings. This
    " causes a huge delay when trying to exit insert or visual mode
    " while in the terminal. Setting this option to 1 fixes that.
    let g:delimitMate_no_esc_mapping = 1

  Bundle "guns/vim-clojure-static"
    let g:clojure_align_multiline_strings = 1
    let g:clojure_fuzzy_indent = 1
    let g:clojure_fuzzy_indent_patterns = ['^ann', '^def', '^try']
  Bundle 'guns/vim-sexp'
  Bundle 'guns/vim-clojure-highlight'

  Bundle "kien/rainbow_parentheses.vim"
    let g:rbpt_colorpairs = [
          \ ['9', 'darkred'],
          \ ['13', 'darkmagenta'],
          \ ['2', 'green'],
          \ ['6', 'cyan'],
          \ ['3', 'yellow'],
          \ ['5', 'magenta'],
          \ ['4', 'blue'],
          \ ]

  Bundle "kchmck/vim-coffee-script"

  Bundle "grails-vim"

  Bundle 'groenewege/vim-less'


" Enable syntax highlighting and filetype detection.

  filetype plugin indent on
  syntax enable


" The colorscheme is Solarized, and I like things dark (like a
" submarine!). Solarized can be toggled by hitting <F5>.

  set background=dark
  colorscheme solarized
  call togglebg#map("<F5>")

  " Modifications
  highlight SignColumn ctermbg=8
  highlight EasyMotionShade ctermfg=0
  highlight IndentGuidesOdd ctermbg=8
  highlight IndentGuidesEven ctermbg=0

  let s:comments_normal_contrast = 1
  noremap <F7> :call <SID>ToggleCommentContrast()<CR>
  function <SID>ToggleCommentContrast()
    if s:comments_normal_contrast == 1
      hi Comment ctermfg=0
      let s:comments_normal_contrast = 0
    else
      hi Comment ctermfg=10
      let s:comments_normal_contrast = 1
    endif
  endfunction


" Highlight extraneous whitespace as red.

  if has("autocmd")
    augroup whitespace
      au BufWinEnter * let w:m1=matchadd("ErrorMsg", '\s\+$', -1)
    augroup END
  endif


" Change the leader key from "\" to ",". The leader key is used when
" defining custom shortcut keys to speed up some actions.

  let mapleader = ","


" These settings make escaping insert and visual modes much faster when
" using Vim in the terminal.

  set notimeout
  set ttimeout
  set ttimeoutlen=10


" Set some sane and reasonable defaults.

  set shell=/bin/bash
  set autoread                       " Don't ask me about loading files.
  set hidden                         " Handle multiple buffers better.
  set noshowmode                     " Don't show the current mode.
  set relativenumber                 " Show relative line numbers.
  set number                         " Show the line number on the current
                                     "   line.
  set nowrap                         " Don't wrap lines.
  set showcmd                        " Display incomplete commands.
  set backspace=indent,eol,start     " Intuitive backspacing.
  set wildmenu                       " Enhanced command line completion.
  set wildmode=list:longest          " Complete files like a shell.
  set completeopt=menu,preview       " Show the completion menu along with
                                     "   preview information.
  set hlsearch                       " Highlight matches.
  set incsearch                      " Highlight matches as you type.
  set ignorecase                     " Case-insensitive searching.
  set smartcase                      " But case-sensitive if expression
                                     "   contains capitals.
  set spelllang=en_us                " U.S. English is the default language.
  set spellfile=$HOME/.vim/spell/en.utf-8.add
                                     " Define where to store the spellfile
  set numberwidth=5                  " Line numbers are at least 5 characters
                                     "   wide.
  set cursorline                     " Show the cursor's line.
  set colorcolumn=72,79              " Show a column at 79 so I don't overtype.
  set textwidth=72                   " Hard wrap lines at column 72.
  set scrolloff=3                    " Show 3 lines of context around the
                                     "   cursor.
  set laststatus=2                   " Show the status line all the time
  set visualbell                     " No beeping.
  set nobackup                       " Don't make a backup before overwriting
                                     "   a file.
  set noswapfile                     " No swap files.
  set nowritebackup                  " And again.
  set undofile                       " Store persistent undo's.
  set undodir=$HOME/.vim/undo        " Set where to store undo's.
  set nofoldenable                   " Don't fold code by default.
  set nomodeline                     " No modelines for security reasons.
  set ts=2 sts=2 sw=2 expandtab      " Default setting for tabs (2 spaces).
  set omnifunc=syntaxcomplete#Complete
                                     " Turn on omnicompletion.
  set updatetime=750


" Make movement work better with wrapped lines.

  nmap j gj
  nmap k gk


" System clipboard interaction

  nnoremap <leader>Y :.!pbcopy<CR>uk<CR>
  vnoremap <leader>Y :!pbcopy<CR>uk<CR>
  noremap <leader>P :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>"


" Use f for easymotion

  nmap f <leader><leader>f
  nmap F <leader><leader>F
  vmap f <leader><leader>f
  vmap F <leader><leader>F


" Create a command to easily redraw!

  nnoremap <leader><leader>r :redraw!<CR>


" Make a command to toggle showing invisible characters, and set what
" those are.

  nnoremap <leader>l :set list!<cr>
  set listchars=tab:▸\ ,trail:·,extends:…,precedes:…,eol:¬


" Make window switching super-easy by setting some simple key remaps.

  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l


" Remap enter to trigger :w

  nnoremap <cr> :w<cr>
  " Undo custom mapping in the command line window.
  autocmd CmdwinEnter :,/,>,?,=,@,- nnoremap <buffer> <cr> <cr>


" Some filetypes need some special settings.

  if has("autocmd")
    augroup filetypes
      au!
      au BufNewFile,BufRead *.rss  setlocal filetype=xml
      au BufNewFile,BufRead *.md   setlocal filetype=markdown spell
      au BufNewFile,BufRead *.edn  setlocal filetype=clojure
      au Filetype clojure          setlocal foldmethod=indent
      au Filetype gitcommit        setlocal spell
    augroup END
  endif


" Set some spaces vs. tabs settings for various filetypes.

  if has("autocmd")
    augroup tabstops
      au!
      au FileType make       setlocal ts=8 sts=8 sw=8 noexpandtab
      au FileType yaml       setlocal ts=2 sts=2 sw=2   expandtab
      au FileType markdown   setlocal ts=4 sts=4 sw=4
    augroup END
  endif


" Fix CSS newline behavior.

  augroup ft_css
    au!
    au Filetype scss,less,css setlocal foldmethod=marker
    au Filetype scss,less,css setlocal foldmarker={,}
    au Filetype scss,less,css setlocal omnifunc=csscomplete#CompleteCSS
    au BufNewFile,BufRead *.scss,*.less,*.css inoremap <buffer> {<cr> {}<left><cr><space><space>.<cr><esc>kA<bs>
  augroup END


" Load rainbow_parentheses.

  augroup rainbow_parentheses
    au!
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
  augroup END


" More Clojure stuff.
  augroup ft_clojure
    au!
    au FileType clojure let b:delimitMate_quotes = '"'
    au BufNewFile,BufRead *.clj nmap <buffer> cpr :Eval (clojure.tools.namespace.repl/refresh)<cr>
    au BufNewFile,BufRead *.clj nmap <buffer> cpR :Eval (clojure.tools.namespace.repl/refresh-all)<cr>
  augroup END


" Groovy, you POS.

  augroup ft_groovy
    au!
    au BufNewFile,BufRead *.groovy setlocal filetype=java
  augroup END


" Create a ':Wrap' command, and set what the line-break symbol is.

  command! Wrap set wrap! linebreak nolist


" Set CoffeeScript buffers to compile automatically into JavaScript, and
" create a command to toggle this functionality.

  let s:coffeescript_compiling_enabled = 0
  if s:coffeescript_compiling_enabled == 1
    augroup CoffeeScript
      autocmd!
      autocmd BufWritePost *.coffee silent CoffeeMake! | cwindow | redraw!
    augroup END
  endif

  func! ToggleCoffeeScriptCompiling__()
    if s:coffeescript_compiling_enabled == 1
      augroup CoffeeScript
        autocmd!
      augroup END
      let s:coffeescript_compiling_enabled = 0
      let l:message = "disabled"
    else
      augroup CoffeeScript
        autocmd!
        autocmd BufWritePost *.coffee silent CoffeeMake! | cwindow | redraw!
      augroup END
      let s:coffeescript_compiling_enabled = 1
      let l:message = "enabled"
    endif
    echo "CoffeeScript compiling " . l:message
  endfunc

  command! ToggleCoffee call ToggleCoffeeScriptCompiling__()


" Gundo is a plugin that allows for easy browsing of the undo history
" tree. I find this so useful and I use it so often that I want to map
" it to <leader>g for easy browsing.

  nmap <leader>g :GundoToggle<cr>


" Map a shortcut for NERDTree.

  nnoremap <leader>N :NERDTreeToggle<CR>

" Make ctrl-shift-t show the syntax stack of the character underneath
" the cursor. This is handy for debugging or examining how syntax
" highlighting works for a colorscheme.

  nmap <C-S-T> :call <SID>SynStack()<CR>
  func! <SID>SynStack()
    if !exists("*synstack")
      return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
  endfunc


" Create a command to set tabstop, softtabstop and shiftwidth to the
" same value.

  command! Stab call Stab()

  func! Stab()
    let l:tabstop = 1 * input('set tabstop = softtabstop = shiftwidth = ')
    if l:tabstop > 0
      let &l:sts = l:tabstop
      let &l:ts = l:tabstop
      let &l:sw = l:tabstop
    endif
  endfunc
